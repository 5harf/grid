0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.4
3 info using node@v0.12.7
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Users/matthew.martin/projects/grid',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /Users/matthew.martin/.npm/grid/3.0.0/package.tgz not in flight; packing
10 verbose tar pack [ '/Users/matthew.martin/.npm/grid/3.0.0/package.tgz',
10 verbose tar pack   '/Users/matthew.martin/projects/grid' ]
11 verbose tarball /Users/matthew.martin/.npm/grid/3.0.0/package.tgz
12 verbose folder /Users/matthew.martin/projects/grid
13 info prepublish grid@3.0.0
14 verbose addLocalTarball adding from inside cache /Users/matthew.martin/.npm/grid/3.0.0/package.tgz
15 silly cache afterAdd grid@3.0.0
16 verbose afterAdd /Users/matthew.martin/.npm/grid/3.0.0/package/package.json not in flight; writing
17 verbose afterAdd /Users/matthew.martin/.npm/grid/3.0.0/package/package.json written
18 silly publish { name: 'grid',
18 silly publish   version: '3.0.0',
18 silly publish   description: 'A highly scalable grid component written in javscript',
18 silly publish   main: 'src/modules/grid-entry.js',
18 silly publish   publishConfig: { registry: 'https://registry.npmjs.org/' },
18 silly publish   engines: { node: '>=0.10.0' },
18 silly publish   iqproj: { app: true },
18 silly publish   scripts:
18 silly publish    { test: 'bin/iqb test',
18 silly publish      start: 'bin/iqb start',
18 silly publish      preversion: 'bin/iqb test' },
18 silly publish   dependencies:
18 silly publish    { angular: '~1.4.7',
18 silly publish      'angular-mocks': '~1.4.7',
18 silly publish      'angular-route': '~1.4.7',
18 silly publish      capitalize: '^0.5.0',
18 silly publish      'click-off': '~0.2.1',
18 silly publish      'element-class': '^0.1.1',
18 silly publish      'escape-stack': '~0.1.2',
18 silly publish      'inner-text-shim': '~1.0.1',
18 silly publish      key: '^0.1.11',
18 silly publish      'time-now': '~0.2.1' },
18 silly publish   devDependencies:
18 silly publish    { aliasify: '^1.5.0',
18 silly publish      browserify: '~12.0.1',
18 silly publish      'browserify-istanbul': '~0.2.1',
18 silly publish      'chokidar-cli': '~1.1.1',
18 silly publish      'connect-livereload': '~0.5.3',
18 silly publish      'es6-promise': '~3.1.2',
18 silly publish      exorcist: '~0.4.0',
18 silly publish      express: '~4.13.3',
18 silly publish      jasmine: '~2.3.2',
18 silly publish      'jasmine-tools-riq': '~0.3.0',
18 silly publish      jquery: '^2.1.0',
18 silly publish      karma: '~0.13.14',
18 silly publish      'karma-browserify': '~4.4.0',
18 silly publish      'karma-chrome-launcher': '~0.2.1',
18 silly publish      'karma-jasmine': '~0.3.6',
18 silly publish      'karma-jasmine-jquery': '~0.1.1',
18 silly publish      'karma-phantomjs-launcher': '~0.2.1',
18 silly publish      lodash: '~4.11.0',
18 silly publish      'node-sass': '~3.4.1',
18 silly publish      phantomjs: '~1.9.18',
18 silly publish      'polyfill-function-prototype-bind': '0.0.1',
18 silly publish      'tiny-lr': '~0.2.1',
18 silly publish      watchify: '~3.6.0',
18 silly publish      yargs: '^1.2.2' },
18 silly publish   peerDependencies: { aliasify: '^1.5.0' },
18 silly publish   browserify: { transform: [ 'aliasify' ] },
18 silly publish   aliasify: { aliases: { '@grid': './src/modules' } },
18 silly publish   'browserify-shim': {},
18 silly publish   repository: { type: 'git', url: 'git+https://github.com/relateiq/grid.git' },
18 silly publish   keywords: [ 'grid', 'spreadsheet', 'virtual', 'scroll' ],
18 silly publish   author: { name: 'Sterling Camden' },
18 silly publish   license: 'MIT',
18 silly publish   bugs: { url: 'https://github.com/relateiq/grid/issues' },
18 silly publish   homepage: 'https://github.com/relateiq/grid',
18 silly publish   readme: 'grid\n===\n\nA highly scaleable grid component written in javscript\n\nNote: while Grid is fully functional it is still in beta. Use at your own risk and please file any issues on GitHub. \n\nAlso the grid is currently packaged for use with browserify. If you need a build for a non browserify (or webpack) environment please open an issue on github.\n\n\ninstallation\n===\n`npm install --save grid`\n\nif using angular the wrapping module can simply be accessed:\n\n\n`angular.module(\'myGridApp\', [require(\'grid\')])`\n\n\nthe three srvcs currently exposed can be injected\n\n`function(GridSrvc, GridBuilderSrvc, GridDecoratorSrvc){}`\n\n\nif not using angular \n\n`var core = require(\'grid/src/modules/core\')`\n\n\nexample / quick start\n===\n\nTo run the sample app locally, run `npm start` and hit http://localhost:8082\n\n##### create a grid instance\n`var grid = core();` or in angular `var grid = GridSrvc.core();`\n\nThe grid handles most complexity for you. There are only three user supplied requirements to a get a grid up and running\n\n##### row and column descriptors\nRow and column descriptors are objects that tell the grid how wide or high to make your cells. They also control things like whether or not a column is hidden and describe the overall dimensions of the grid.\n\n``` javascript\n\t// add some columns\n    var colDescriptors = [];\n    var colDescriptor;\n    for (var c = 0; c < 20; c++) {\n        // create a col descriptor\n        colDescriptor = grid.colModel.create();\n        colDescriptor.width = 78;\n        colDescriptor.hidden = !!(c % 2); // hide every other column for fun and profit\n    }\n    grid.colModel.add(colDescriptors);\n\n    // add some rows\n    var rowDescriptors = [];\n    var rowDescriptor;\n    for (var r = 0; r < 20; r++) {\n        // create a row descriptor\n        rowDescriptor = grid.rowModel.create();\n        rowDescriptor.height = 24;\n        if(r === 0){\n        \trowDescriptor.header = true;\n        }\n    }\n    grid.rowModel.add(rowDescriptors);\n```\n\n##### The DataModel\n\nThe grid determines what to render for a given cell by calling the supplied data model. This gives the client massive flexbility to generate and return the data however they need to.\n\nThe datamodel can be a simple object that the user sets on the grid instance `dataModel` field and needs to implement at a minimum\n\n`get`, `getHeader`, `getCopyData`, and `isDirty`, \n\nif you support user data entry and want paste to work you should also implement `set`\n\nHere\'s a basic read only implementation:\n\n``` javascript\n// use the grid\'s default dirty clean implementation almost always\n// (it will automatically be set clean on each draw by the grid)\nvar dataDirtyClean = grid.makeDirtyClean();\n\ngrid.dataModel = {\n\n    get: function(dataRowIndex, dataColIndex) {\n        var rawValue = [dataRowIndex, dataColIndex];\n        return {\n            value: rawValue,\n            formatted: \'r\' + rawValue[0] + \', c\' + rawValue[1]\n        };\n    },\n    \n    getHeader: function(headerRowIndex, headerColIndex) {\n        var rawValue = [headerRowIndex, headerColIndex];\n        return {\n            value: rawValue,\n            formatted: \'hr\' + rawValue[0] + \', hc\' + rawValue[1]\n        };\n    },\n    \n    // copy data is the same as normal data but it expects the result to only be a string \n    // (and gives the client a chance to return more interesting data for the copy)\n    getCopyData: function(dataRowIndex, dataColIndex) {\n        return grid.dataModel.get(dataRowIndex, dataColIndex).formatted;\n    },\n    \n    isDirty: dataDirtyClean.isDirty\n};\n```\n\n##### call build\nFinally we just need to tell the grid to set itself up in a container of our choosing:\n\n``` javascript\nvar container = document.createElement(\'div\');\ncontainer.style.width = \'800px\';\ncontainer.style.height = \'800px\';\ndocument.body.appendChild(container);\ngrid.build(container);\n```\n\nconcepts\n===\n\nMany of the apis in the grid utilize two concepts when referencing coordinates: spaces and units. It\'s good to understand these before using the more advanced features.\n\n## spaces\nCoordinates in the grid exist in one of three spaces.\n\n**virtual** - represents all of the data in your grid including the headers. for example, if you have a grid with one header row, then `(0, 20)` in the `\'virtual\'` space references the column 20 of the header. `(1, 20)` would reference column 20 of the first data row.\n\n**data** - very similar to virtual but does not include the headers. so `(0,20)` references the first row of data at the 20th column and technically `(-1, 20)` would represent the 20th column in the header although negative indexes are rarely used\n\n**view** - the view space represents the actual dom nodes that are rendered for the grid\'s virtualization. the grid\'s implementation renders enough cells to fill the entire viewport and no more (usually around 20-30 rows and 10 cols depending on sizes). in this space `(0,20)` would reference the dom cell at column 20 of the first row. even if you scroll the grid it will always point at that cell, so a view coordinate can be translated to different virtual coordinates depending on the scroll. you could think of view coordinates as a correlary for `position: fixed` in css\n\n## units\nUnits in the grid are straightforward. They are either\n\n**px** - pixels, so `(0,0)` in the view space is the very top left pixel of the grid no matter the scroll, whereas `(0,0)` in the virtual space is the top left pixel only when the grid hasn\'t been scrolled, and would technically refer to a pixel out of view if the grid has been scrolled\n\nor\n\n**cell** - cells, so `(0,0)` in the view space represents the top left cell regardless of scroll, and `(0,0)` in the virtual space would represent an off screen cell if scrolled and top left if not scrolled\n\nusing custom html\n===\n\nThere are two ways to get non text (read html) into a grid:\n\n## decorators\nDecorators are great for adding a piece of one-off ui that doesn\'t relate directly to the content of a cell or doesn\'t need to be in every row of a column or vice versa. For example, the grid internally uses decorators to render the focus and selection highlight as well as resize handles.\n\n**basic decorator**\n``` javascript\n\tvar top = 1,\n    left = 2,\n    height = 1,\n    width = 1,\n    unit = \'cell\',\n    space = \'view\';\n    var d = grid.decorators.create(top, left, height, width, unit, space);\n\n    // return some element\n    d.render = function() {\n        var a = document.createElement(\'a\')\n        a.textContent = \'link Text!\'\n        return a;\n    };\n    grid.decorators.add(d);\n```\n\nPuts a link over the cell at row 1 col 2 that doesn’t move with the scroll (why you would do this is questionable but it\'s just an example).\n\nYou can do more complicated things like render \n\n**angular directive decorator**\n``` javascript\nangular.module(\'myCoolGrid\', [require(\'grid\')])\n\n  .controller(\'MyGridCtrl\', function($scope, GridSrvc, GridDecoratorSrvc) {\n      var grid = GridSrvc.core();\n\n      // do row col and datamodel setup...\n\n      var top = 20,\n          left = 10,\n          height = 2,\n          width = 2,\n          unit = \'cell\',\n          space = \'virtual\';\n      var d = grid.decorators.create(top, left, height, width, unit, space);\n\n      // return some element\n      d.render = function() {\n          var scope = $scope.$new();\n          scope.interestingData = \'INTERESTING DATA!!!\';\n          return GridDecoratorSrvc.render({\n              $scope: scope,\n              template: \'<my-directive data="interestingData"></my-directive>\',\n              events: true\n          });\n      };\n      grid.decorators.add(d);\n  });\n```\n\nThis will put your compiled directive in a box that spans from `row 20-22` and `col 10-12`, and moves appropriately with the scroll. The `events` flag lets the grid know that this decorator is interactable and should receive mouse events. (Otherwise pointer events are set to none.) The GridDecoratorSrvc takes care of destroying the scope and properly removing elements to avoid memory leaks with angular. You definitely should use it for any angular decorators.\n\n\n## builders\nBuilders help you to get html into the actual cells of a given row or column instead of the text that would have been rendered.\n\n\n**basic builders**\n``` javascript\nvar builder = grid.colModel.createBuilder(function render() {\n    return angular.element(\'<a href="#"></a>\')[0];\n}, function update(elem, ctx) {\n    grid.viewLayer.setTextContent(elem, ctx.data.formatted);\n    return elem;\n});\nvar colDescriptor = grid.colModel.create(builder);\n```\n\nhave `<a>` tags in your cells for all the rows in that column\n\n**angular cell builder**\n\n``` javascript\nangular.module(\'myCoolGrid\', [require(\'grid\')])\n\n.controller(\'MyGridCtrl\', function($scope, GridSrvc, GridBuilderSrvc) {\n    var grid = GridSrvc.core();\n\n    // do row col and datamodel setup...\n\n    grid.colModel.create(grid.colModel.createBuilder(function render(ctx) {\n        return GridBuilderSrvc.render($scope, \'<my-directive data="interestingData"></my-directive>\');\n    }, function update(elem, ctx) {\n        var scope = angular.element(elem).scope();\n        scope.interestingData = ctx.data.formatted;\n        scope.$digest();\n        return elem;\n    }));\n});\n```\n\nThe GridBuilderSrvc handles destroying the scope and properly removing the elements to prevent memory leaks.\n\nNote: it\'s important for the update function of a builder to be extremely fast. Call `scope.$digest` not `scope.$apply`, and  use `grid.viewLayer.setTextContent` not `elem.innerHTML` where possible\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '7337a79171b52d75e5fcef98e74b636e93c3f386',
18 silly publish   _id: 'grid@3.0.0',
18 silly publish   _shasum: 'b81f00a4d60bac295535c8ad47050d8f701a8836',
18 silly publish   _from: '.' }
19 verbose getPublishConfig { registry: 'https://registry.npmjs.org/' }
20 silly mapToRegistry name grid
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/grid
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /Users/matthew.martin/.npm/grid/3.0.0/package.tgz
26 verbose request uri https://registry.npmjs.org/grid
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 14:02:23
29 verbose request using bearer token for auth
30 verbose request id f37916d42e3bf9fb
31 http request PUT https://registry.npmjs.org/grid
32 http 403 https://registry.npmjs.org/grid
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=300',
33 verbose headers   'content-length': '95',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Tue, 26 Apr 2016 21:02:21 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-ord1747-ORD',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1461704539.799332,VS0,VE1874',
33 verbose headers   vary: 'Accept-Encoding' }
34 verbose request invalidating /Users/matthew.martin/.npm/registry.npmjs.org/grid on PUT
35 error publish Failed PUT 403
36 verbose stack Error: "You cannot publish over the previously published version 3.0.0." : grid
36 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:263:12)
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:251:14)
36 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:171:14)
36 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
36 verbose stack     at Request.emit (events.js:110:17)
36 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1073:14)
36 verbose stack     at Request.emit (events.js:129:20)
36 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1019:12)
36 verbose stack     at IncomingMessage.emit (events.js:129:20)
36 verbose stack     at _stream_readable.js:908:16
37 verbose statusCode 403
38 verbose pkgid grid
39 verbose cwd /Users/matthew.martin/projects/grid
40 error Darwin 15.4.0
41 error argv "node" "/usr/local/bin/npm" "publish"
42 error node v0.12.7
43 error npm  v2.14.4
44 error code E403
45 error "You cannot publish over the previously published version 3.0.0." : grid
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
