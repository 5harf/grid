var renderOncePType = require('render-once');
var addRemovePType = require('add-remove');

module.exports =
    angular.module('prototype-harness', [
        require('../../../../tmp/templates').name
    ])
        .directive('prototypeHarness', function () {
            return {
                restrict: 'E',
                replace: true,
                templateUrl: 'prototype-harness.html',
                link: function ($scope, elem) {
                    $scope.ptypeModel = {
                        rows: 1000,
                        cols: 100,
                        buffer: 50,
                        debounce : 500
                    };

                    $scope.rebuild = function () {
                        if (currentPType) {
                            currentPType.setDimensions($scope.ptypeModel.rows, $scope.ptypeModel.cols);
                            currentPType.rebuild();
                        }
                    };

                    var currentPType, container;

                    function resetContainer() {
                        if (container) {
                            container.remove();
                        }
                        container = $('<div class="prototype-container"/>');
                        elem.append(container);
                    }

                    $scope.buildOnce = function (textNodes, anchor, textOnly) {
                        buildContainer(function () {
                            var ptype = renderOncePType(container);
                            ptype.setUseTextNodes(textNodes);
                            ptype.setHtmlOnlyText(textOnly);
                            ptype.setHtmlAnchor(anchor);
                            return ptype;
                        });
                    };

                    $scope.addRemove = function (scroller) {
                        buildContainer(function () {
                            var ptype = addRemovePType(container);
                            ptype.setUseScroller(scroller);
                            ptype.setBuffer($scope.ptypeModel.buffer);
                            ptype.setDebounce($scope.ptypeModel.debounce);
                            return ptype;
                        });
                    };

                    function buildContainer(setupPrototypeFn) {
                        resetContainer();
                        currentPType = setupPrototypeFn();
                        $scope.rebuild();
                    }
                }
            };
        })
;